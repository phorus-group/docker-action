name: Docker Action
description: A GitHub action to build and push a docker image from a default or custom Dockerfile

inputs:
  dockerfiles-repository:
    description: "Repository containing the Dockerfile to use. Needs dockefile-path input to work"
    required: false
  dockerfile-path:
    description: "Dockerfile path inside the dockerfiles-repository"
    required: false
  image:
    description: "The image name"
    required: false
    default: ${{ github.event.repository.full_name }}
  tag:
    description: "Extra image tag"
    required: false
  push:
    description: "Whether to push the image or not. The latest tag will be pushed only from the main branch"
    required: false
    default: "false"
  disable-login:
    description: "Disable docker login"
    required: false
    default: "false"
  registry:
    description: "Docker registry"
    required: false
    default: "ghcr.io"
  registry-user:
    description: "Docker registry user"
    required: false
    default: ${{ github.actor }}
  registry-password:
    description: "Docker registry password"
    required: false
    default: ${{ github.token }}
  vulnerability-analysis:
    description: "Run vulnerability analysis"
    required: false
    default: "true"
  upload-sarif:
    description: "Upload the sarif file to the GitHub Security tab. Disable if you don't have GitHub Advanced Security"
    required: false
    default: "false"
outputs:
  image:
    description: "Image name with an SHA tag"
    value: ${{ steps.image.outputs.image }}

runs:
  using: composite
  steps:
    - name: "Login to Docker registry"
      if: ${{ inputs.disable-login != 'true' }}
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry-user }}
        password: ${{ inputs.registry-password }}

    - name: "Clone Dockerfile repository"
      if: ${{ inputs.dockerfile-path != '' }}
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.dockerfiles-repository || 'phorus-group/docker-action' }}
        path: .dockerfiles-repository

    - name: "Set the Dockerfile"
      if: ${{ inputs.dockerfile-path != '' }}
      shell: bash
      run: |
        rm -f Dockerfile
        mv .dockerfiles-repository/${{ inputs.dockerfile-path }} Dockerfile
        rm -rf .dockerfiles-repository

    - name: "Set up QEMU"
      uses: docker/setup-qemu-action@v3

    - name: "Set up Docker Buildx"
      uses: docker/setup-buildx-action@v3

    - name: "Extract metadata"
      id: meta
      uses: docker/metadata-action@v5
      env:
        DOCKER_METADATA_PR_HEAD_SHA: true
      with:
        images: ${{ inputs.registry }}/${{ inputs.image }}
        tags: |
          type=raw,value=${{ inputs.tag }},enable=${{ inputs.tag != '' }}
          type=raw,value=latest,enable=${{ github.ref_name == github.event.repository.default_branch }}
          type=sha,prefix=,suffix=,format=short

    - name: "Process image name"
      id: image
      shell: bash
      run: |
        TAGS=(${{ steps.meta.outputs.tags }})
        echo "name=${TAGS[0]%%:*}" >> "$GITHUB_OUTPUT"
        echo "image=${TAGS[-1]}" >> "$GITHUB_OUTPUT"

    - name: "Build Docker image"
      uses: docker/build-push-action@v6
      with:
        context: .
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        annotations: ${{ steps.meta.outputs.annotations }}
        cache-from: type=registry,ref=${{ steps.image.outputs.name }}:buildcache
        cache-to: type=registry,mode=max,image-manifest=true,ref=${{ steps.image.outputs.name }}:buildcache

    - name: "Run vulnerability analysis"
      if: ${{ inputs.vulnerability-analysis == 'true' }}
      uses: phorus-group/vulnerability-analysis-action@main
      with:
        scan-type: image
        scan-ref: ${{ steps.image.outputs.image }}
        upload-sarif: ${{ inputs.upload-sarif }}

    - name: "Push Docker image"
      if: ${{ inputs.push == 'true' }}
      uses: docker/build-push-action@v6
      with:
        context: .
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        annotations: ${{ steps.meta.outputs.annotations }}
        cache-from: type=registry,ref=${{ steps.image.outputs.name }}:buildcache
        cache-to: type=registry,mode=max,image-manifest=true,ref=${{ steps.image.outputs.name }}:buildcache
        provenance: mode=max
        sbom: true
        push: true
